<?php

namespace Daalder\BusinessCentral\Tests\Repositories;

use Daalder\BusinessCentral\API\HttpClient;
use Daalder\BusinessCentral\Repositories\CustomerRepository;
use Daalder\BusinessCentral\Models\CustomerBusinessCentral;
use Daalder\BusinessCentral\Tests\TestCase as DaalderTestCase;
use Mockery;
use Pionect\Daalder\Models\Customer\Customer;

/**
 * Class CustomerRepositoryTest
 * @package Daalder\BusinessCentral\Tests\API\Repositories
 * @covers CustomerRepository
 */
class CustomerRepositoryTest extends DaalderTestCase
{
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

    }

    /**
     * @test
     * @covers CustomerRepository::get()
     */
    public function testGet()
    {
        $this->mock(HttpClient::class, function ($mock) {
            /** @var Mockery\Mock $mock */
            $mock->shouldReceive('get')->once()->withArgs(['companies()/customers(12345)']);
        });

        Customer::withoutSyncingToSearch(function () {
            /** @var Customer $customer */
            $customer = Customer::factory()->create();

            $reference = CustomerBusinessCentral::create([
                'customer_id'=> $customer->id,
                'business_central_id' => '12345'
            ]);

            $customerRepository = app(CustomerRepository::class);
            $customerRepository->get($reference->business_central_id);
        });
    }

    /**
     * @test
     * @covers CustomerRepository::delete()
     */
    public function testDelete()
    {
        $this->mock(HttpClient::class, function ($mock) {
            $mock->shouldReceive('delete')->once();
        });

        Customer::withoutSyncingToSearch(function () {
            /** @var Customer $customer */
            $customer = Customer::factory()->create();

            $reference = CustomerBusinessCentral::create([
                'customer_id'=> $customer->id,
                'business_central_id' => '12345'
            ]);

            $this->assertDatabaseHas('customers', ['id'=>$customer->id, 'firstname'=>$customer->firstname]);
            $this->assertDatabaseHas('customer_business_central', ['customer_id'=>$customer->id, 'business_central_id'=>'12345']);

            $customerRepository = app(CustomerRepository::class);

            $customerRepository->delete($customer);
        });
    }

    /**
     * @test
     * @covers CustomerRepository::create()
     */
    public function testCreate()
    {
        $this->mock(HttpClient::class, function ($mock) {
            $response = new \stdClass();
            $response->id = 1;

            $mock->shouldReceive('post')->andReturn($response);
        });


        Customer::withoutSyncingToSearch(function () {
            /** @var Customer $customer */
            $customer = Customer::factory()->create();

            $this->assertDatabaseHas('customers', ['id'=>$customer->id, 'firstname'=>$customer->firstname]);

            $customerRepository = app(CustomerRepository::class);
            $customerRepository->create($customer);

            $this->assertDatabaseHas('customer_business_central', ['customer_id'=>$customer->id, 'business_central_id'=>'1']);
        });
    }

    /**
     * @test
     * @covers CustomerRepository::update()
     */
    public function testUpdate()
    {
        $this->mock(HttpClient::class, function ($mock) {
            $mock->shouldReceive('patch')->once();
        });

        Customer::withoutSyncingToSearch(function () {
            /** @var Customer $customer */
            $customer = Customer::factory()->create();

            $reference = CustomerBusinessCentral::create([
                'customer_id'=> $customer->id,
                'business_central_id' => '12345'
            ]);

            $this->assertDatabaseHas('customers', ['id'=>$customer->id, 'firstname'=>$customer->firstname]);
            $this->assertDatabaseHas('customer_business_central', ['customer_id'=>$customer->id, 'business_central_id'=>'12345']);

            $customerRepository = app(CustomerRepository::class);

            $customerRepository->update($customer);
        });
    }

    /**
     * @test
     */
    public function testCreateThenUpdate()
    {
        $this->mock(HttpClient::class, function ($mock) {
            $mock->shouldReceive('patch')->once();
        });

        Customer::withoutSyncingToSearch(function () {
            /** @var Customer $customer */
            $customer = Customer::factory()->create();

            $reference = CustomerBusinessCentral::create([
                'customer_id'=> $customer->id,
                'business_central_id' => '12345'
            ]);

            $this->assertDatabaseHas('customers', ['id'=>$customer->id, 'firstname'=>$customer->firstname]);
            $this->assertDatabaseHas('customer_business_central', ['customer_id'=>$customer->id, 'business_central_id'=>'12345']);

            $customerRepository = app(CustomerRepository::class);

            $customerRepository->create($customer);
        });
    }
}
